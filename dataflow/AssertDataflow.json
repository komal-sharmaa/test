{
	"name": "AssertDataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Employee3",
						"type": "DatasetReference"
					},
					"name": "Emp"
				},
				{
					"dataset": {
						"referenceName": "Dept",
						"type": "DatasetReference"
					},
					"name": "Dept"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_outputFolder",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "assert1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filterGoodRows"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          gender as string,",
				"          country as string,",
				"          doj as string,",
				"          dept as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Emp",
				"source(output(",
				"          depid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Dept",
				"Emp, Dept assert(expectTrue(!isNull(toDate(doj, 'yyyyMMdd')), false, 'assertDoj'),",
				"     expectUnique(empid, false, 'assertEmpId'),",
				"     expectExists(dept == depid, false, 'assertDep')) ~> assert1",
				"assert1 derive(isErrorRow = isError(),",
				"          isErrorDepRow = hasError('assertDep')) ~> derivedColumn1",
				"derivedColumn1 filter(isErrorRow == false()) ~> filterGoodRows",
				"filterGoodRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['assert.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          empid,",
				"          name,",
				"          gender,",
				"          country,",
				"          doj,",
				"          dept,",
				"          depid,",
				"          depname,",
				"          isErrorRow,",
				"          isErrorDepRow",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}